#include <unordered_map>
#include <vector>
#include <string>
#include <cstring>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <stdexcept>

#include "server/Request.hpp"
#include "http/HttpStatus.hpp"
#include "server/TcpConnection.hpp"
#include "Config.hpp"
#include "Utils.hpp"
#include "error/RequestError.hpp"
#include "error/ConnectionError.hpp"
#include "error/TodoError.hpp"


Request::Request(Config const& config, TcpConnection& conn) :
    m_config(config),
    m_conn(conn)
{
    std::string request_line = parse_raw_line();
    parse_method(request_line);
    parse_route(request_line);
    parse_version(request_line);

    // the previous three parse_* calls should consume the entire line
    if (!request_line.empty())
    {
        throw RequestError(HttpStatus::BadRequest, "Malformed request-line\n");
    }

    parse_headers();
    parse_body();
}

void Request::parse_method(std::string& raw_line)
{
    
	if((raw_line[0] == 'G' && raw_line[1] == 'E' && raw_line[2] == 'T')|| 
	(raw_line[0] == 'P' && raw_line[1]== 'O' && raw_line[2] == 'S'&& 
		raw_line[3] == 'T'))
	{
					
	}
	else{
		throw RequestError(HttpStatus::MethodNotAllowed, std::string("Request tried to use method") + raw_line +"which we do not allow!" );
	}
}

void Request::parse_route(std::string& raw_line)
{

	if(raw_line[0] != '\\') {
		throw RequestError( HttpStatus::BadRequest, "Request requires \'\\\' which it doesn't have!" );
	}

}

void Request::parse_querystring(std::string query, std::unordered_map<std::string, std::string>& parsed)
{
    throw TodoError("6", "You have to implement parsing querystrings");
}

void Request::parse_version(std::string& raw_line)
{

	if(raw_line[0] == 'H' && raw_line[1] == 'T' && raw_line[2] == 'T' && 
	raw_line[3] == 'P' && raw_line[4]== '1' && raw_line[5] == '.'&& 
	(raw_line[6] == '0' || raw_line[6] == '1'))
	{
			
	}
	else{
		throw RequestError( HttpStatus::HttpVersionNotSupported,
			"Request tried to use an HTTP Version not supported!");
	}

}

void Request::parse_headers()
{
	
}

void Request::parse_body()
{
    if (m_method == "GET") return;

    throw TodoError("6", "You have to implement parsing request bodies");
}

std::string Request::parse_raw_line()
{
	unsigned char c;
	int flag;
	int len;
	std::string str = "";
	while(  len < m_max_buf) {
		if(m_conn.getc(&c) == false) {
			throw ConnectionError(std::string("Error connecting to server."));
		}
		
		if(flag == 1 && c == '\n') {
			break;
		}

		if(c == '\r') {
			flag++;
		}
		else {
			flag = 0;
		}
		str+=c;
		len++;
	}
	str+=c;
	return str;

}

void Request::print() const noexcept
{
    std::cout << m_method << ' ' << m_path << ' ' << m_version << std::endl;
#ifdef DEBUG    
    for (auto const& el : m_headers)
    {
        std::cout << el.first << ": " << el.second << std::endl;
    }

    for (auto const& el : m_query)
    {
        std::cerr << el.first << ": " << el.second << std::endl;
    }

    for (auto const& el : m_body_data)
    {
        std::cerr << el.first << ": " << el.second << std::endl;
    }
#endif	
}

bool Request::try_header(std::string const& key, std::string& value) const noexcept
{
    if (m_headers.find(key) == m_headers.end())
    {
        return false;
    }
    else
    {
        value = m_headers.at(key);
        return true;
    }
}

std::string const& Request::get_path() const noexcept
{
    return m_path;
}

std::string const& Request::get_method() const noexcept
{
    return m_method;
}

std::string const& Request::get_version() const noexcept
{
    return m_version;
}

std::unordered_map<std::string, std::string> const& Request::get_headers() const noexcept
{
    return m_headers;
}

std::unordered_map<std::string, std::string> const& Request::get_query() const noexcept
{
    return m_query;
}

std::unordered_map<std::string, std::string> const& Request::get_body() const noexcept
{
    return m_body_data;
}
